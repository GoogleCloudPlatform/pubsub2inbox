diff -urN a/_vendor/python_docker_orig/base.py a/_vendor/python_docker/base.py
--- a/_vendor/python_docker_orig/base.py	2024-02-13 13:48:53
+++ a/_vendor/python_docker/base.py	2024-02-13 13:49:11
@@ -45,8 +45,15 @@
         self.os = os
         self.created = created or datetime.now(timezone.utc).astimezone().isoformat()
         self.author = author
-        self.config = config or schema.DockerConfigConfig().dict()
 
+        # for pydantic 2 compatibility
+        docker_config = (
+            schema.DockerConfigConfig().model_dump()
+            if hasattr(schema.DockerConfigConfig, "model_dump")
+            else schema.DockerConfigConfig().dict()
+        )
+        self.config = config or docker_config
+
     @property
     def content(self):
         if hasattr(self, "_cached_content"):
@@ -154,13 +161,47 @@
 
     @property
     def manifest_v2(self):
-        docker_manifest = schema.DockerManifestV2.construct()
-        docker_config = schema.DockerConfig.construct(
-            config=schema.DockerConfigConfig(),
-            container_config=schema.DockerConfigConfig(),
-            rootfs=schema.DockerConfigRootFS(),
-        )
+        config = schema.DockerConfig()
+        container_config = schema.DockerConfigConfig()
+        rootfs = schema.DockerConfigRootFS()
 
+        docker_config = None
+        # for pydantic 2 compatibility
+        if hasattr(schema.DockerManifestV2, "model_construct"):
+            docker_manifest = schema.DockerManifestV2.model_construct()
+            docker_config = schema.DockerConfig.model_construct(
+                config=config,
+                container_config=container_config,
+                rootfs=rootfs,
+            )
+            if len(self.layers) > 0:
+                docker_config = schema.DockerConfig.model_construct(
+                    architecture=self.layers[0].architecture,
+                    author=self.layers[0].author,
+                    os=self.layers[0].os,
+                    created=self.layers[0].created,
+                    config=schema.DockerConfigConfig.model_validate(self.layers[0].config),
+                    container_config=None,
+                    rootfs=rootfs,
+                )
+        else:
+            docker_manifest = schema.DockerManifestV2.construct()
+            docker_config = schema.DockerConfig.construct(
+                config=config,
+                container_config=container_config,
+                rootfs=rootfs,
+            )
+            if len(self.layers) > 0:
+                docker_config = schema.DockerConfig.model_construct(
+                    architecture=self.layers[0].architecture,
+                    author=self.layers[0].author,
+                    os=self.layers[0].os,
+                    created=self.layers[0].created,
+                    config=schema.DockerDockerConfig(**self.layers[0].config),
+                    container_config=None,
+                    rootfs=rootfs,
+                )
+    
         for layer in self.layers:
             docker_layer = schema.DockerManifestV2Layer(
                 size=layer.compressed_size, digest=f"sha256:{layer.compressed_checksum}"
diff -urN a/_vendor/python_docker_orig/registry.py a/_vendor/python_docker/registry.py
--- a/_vendor/python_docker_orig/registry.py	2024-02-13 13:48:53
+++ a/_vendor/python_docker/registry.py	2024-02-13 13:49:11
@@ -52,11 +52,12 @@
         self.session.headers.update({"Authorization": f"Basic {credentials}"})
 
     def token_authenticate(self, image: str = None, action: str = None):
-        query = {
-            "service": self.authentication_parameters["service"],
-        }
+        query = {}
         headers = {}
 
+        if "service" in self.authentication_parameters:
+            query["service"] = self.authentication_parameters["service"]
+
         if image is not None and action is not None:
             query["scope"] = f"repository:{image}:{action}"
 
@@ -127,16 +128,26 @@
 
         response.raise_for_status()
         data = response.json()
-        if version == "v1":
-            return schema.DockerManifestV1.parse_obj(data)
-        elif version == "v2":
-            return schema.DockerManifestV2.parse_obj(data)
+        manifest = (
+            schema.DockerManifestV1 if version == "v1" else schema.DockerManifestV2
+        )
 
+        # for pydantic 2 compatibility
+        if hasattr(manifest, "model_validate"):
+            return manifest.model_validate(data)
+        else:
+            return manifest.parse_obj(data)
+
     def get_manifest_configuration(self, image: str, tag: str):
         manifestV2 = self.get_manifest(image, tag, version="v2")
         config_data = json.loads(self.get_blob(image, manifestV2.config.digest))
-        return schema.DockerConfig.parse_obj(config_data)
 
+        # for pydantic 2 compatibility
+        if hasattr(schema.DockerConfig, "model_validate"):
+            return schema.DockerConfig.model_validate(config_data)
+        else:
+            return schema.DockerConfig.parse_obj(config_data)
+
     def get_manifest_digest(self, image: str, tag: str):
         response = self.request(
             f"/v2/{image}/manifests/{tag}",
@@ -195,7 +206,7 @@
             f"/v2/{image}/manifests/{tag}",
             method="PUT",
             data=manifest,
-            image=image,
+            image=image,
             action="push",
             headers={
                 "Content-Type": "application/vnd.docker.distribution.manifest.v2+json"
@@ -204,6 +215,7 @@
         response.raise_for_status()
 
     def list_images(self, n: int = None, last: int = None):
+        self.authenticate()
         query = {}
         if n is not None:
             query["n"] = n
@@ -213,6 +225,7 @@
         return self.request("/v2/_catalog", params=query).json()["repositories"]
 
     def list_image_tags(self, image: str, n: int = None, last: int = None):
+        self.authenticate()
         query = {}
         if n is not None:
             query["n"] = n
@@ -254,6 +267,12 @@
             else:
                 digest = _get_layer_blob(image, layer.digest)
 
+            # for pydantic 2 compatibility
+            if hasattr(manifest_config.config, "model_dump"):
+                config = manifest_config.config.model_dump()
+            else:
+                config = manifest_config.config.dict()
+
             layers.insert(
                 0,
                 Layer(
@@ -262,8 +281,8 @@
                     architecture=manifest_config.architecture,
                     os=manifest_config.os,
                     created=manifest_config.created,
-                    author=None,
-                    config=manifest_config.config.dict(),
+                    author=manifest_config.author,
+                    config=config,
                     content=digest,
                     checksum=checksum,
                     compressed_size=compressed_size,
@@ -289,6 +308,8 @@
         self.upload_manifest(image.name, image.tag, image.manifest_v2)
 
     def delete_image(self, image, tag):
+        self.authenticate(image=image, action="push,pull")
+
         digest = self.get_manifest_digest(image, tag)
         response = self.request(f"/v2/{image}/manifests/{digest}", method="DELETE")
         response.raise_for_status()
diff -urN a/_vendor/python_docker_orig/schema.py a/_vendor/python_docker/schema.py
--- a/_vendor/python_docker_orig/schema.py	2024-02-13 13:48:53
+++ a/_vendor/python_docker/schema.py	2024-02-13 13:49:11
@@ -72,7 +72,7 @@
     Cmd: List[str] = ["/bin/sh"]
     ArgsEscaped: bool = True
     Image: Optional[str] = None
-    Volumes: Optional[List[str]]
+    Volumes: Optional[List[str]] = None
     WorkingDir: str = "/"
     Entrypoint: Optional[List[str]] = ["/bin/sh", "-c"]
     OnBuild: Optional[str] = None
@@ -87,18 +87,20 @@
 class DockerConfigHistory(BaseModel):
     created: str = Field(default_factory=_docker_datetime_factory)
     created_by: str = ""
+    empty_layer: bool = False
 
 
 class DockerConfig(BaseModel):
     architecture: str = "amd64"
+    author: str = None
     os: str = "linux"
-    config: DockerConfigConfig
-    container: Optional[str]
-    container_config: Optional[DockerConfigConfig]
+    config: DockerConfigConfig = None
+    container: Optional[str] = None
+    container_config: Optional[DockerConfigConfig] = None
     created: str = Field(default_factory=_docker_datetime_factory)
     docker_version: str = "18.09.7"
     history: List[DockerConfigHistory] = []
-    rootfs: DockerConfigRootFS
+    rootfs: DockerConfigRootFS = None
 
 
 # https://docs.docker.com/registry/spec/api/#errors-2
