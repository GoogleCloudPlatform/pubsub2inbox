#   Copyright 2023 Google LLC
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# This example requires the following Slack permission scopes:
# - channels:history,
# - groups:history
# - mpim:history
# - im:history
# - chat:write
globals:
  slackToken: "${slack_token}"
  slackAppId: "${slack_app_id}"

# Allow processing to fail, so it doesn't keep retrying errors that won't get
# resolved
canFail: true

pipeline:
  - type: processor.genericjson

  - type: output.logger
    config:
      message: "Slack event received: {{ data|json_encode }}"

  # Check if the message is Slack webhook validation call
  - type: processor.setvariable
    stopIf: |
      {% if 'challenge' in data %}1{% endif %}
    output: slack_abort
    config:
      value: "1"

  # Parse the incoming Slack message by removing the IRC-like nick from the message
  - type: processor.setvariable
    description: Parse message if the app was mentioned in a public channel
    runIf: |
      {% if 'api_app_id' in data and data.event.type == 'app_mention' %}1{% endif %}
    output: slack_message_text
    config:
      value: |
        {{ data.event.text|regex_replace('^<[^>]+> ', '')|remove_mrkdwn }}

  # Set the type of communicatoin
  - type: processor.setvariable
    description: Check if discussion was in public or in private chat
    output: slack_public
    config:
      value: |
        {% if 'api_app_id' in data and data.event.type == 'app_mention' %}1{% else %}0{% endif %}

  # Parse the incoming Slack message by removing the IRC-like nick from the message
  - type: processor.setvariable
    # Check if this is our bot message from events API
    description: Parse message if it was a private message to the app
    stopIf: |
      {% if 'type' in data and data.event.type == 'message' and data.event.app_id %}1{% endif %}
    runIf: |
      {% if 'type' in data and data.event.type == 'message' and 'text' in data.event %}1{% endif %}
    output: slack_message_text
    config:
      value: |
        {{ data.event.text|regex_replace('^<[^>]+> ', '')|remove_mrkdwn }}

  # Fetch existing conversation history from Slack to pass back to Gemini for context
  - type: processor.slack
    description: Fetch Slack conversation history
    output: slack_thread
    config:
      api: conversations.replies
      token: "{{ slackToken }}"
      request:
        channel: "{{ data.event.channel }}"
        ts: "{% if data.event.thread_ts %}{{ data.event.thread_ts }}{% else %}{{ data.event.ts }}{% endif %}"

  # See if this conservation thread has any our app ID mentioned, if so, assume it's a follow up thread
  - type: processor.setvariable
    description: Check if we should reply back
    output: slack_should_reply
    config:
      fromJson: true
      value: |
        {% set app_thread = [(data.event.type == 'app_mention')] %}{% for message in slack_thread.messages %}{% if message.app_id == slackAppId or message.type == 'message' %}{% set _ = app_thread.append(true) %}{% endif %}{% endfor %}{{ app_thread|last|json_encode }}

  # Process the returned conversation history messages into suitable format for Gemini
  - type: processor.slack
    description: Process the conversation history to a format suitable for the API
    runIf: |
      {% if slack_should_reply %}1{% endif %}
    output: slack_messages
    config:
      mode: processMessages
      token: "{{ slackToken }}"
      appId: "{{ slackAppId }}"
      multimodal: true
      messages: slack_thread
%{ if api_enabled ~}
      prompt: |
        Do not call functions unless my question is strictly related to Alphabet financials which
        you don't know the answer for. Answer questions without calling functions if you know the
        answer well enough.
        
%{ endif ~}

  - type: output.logger
    runIf: |
      {% if slack_should_reply %}1{% endif %}
    config:
      message: "Processed Slack thread: {{ slack_messages|json_encode }}"

  # Call Vertex AI Generative AI with the thread messages to make a chat reply
  - type: processor.vertexgenai
    description: Call Vertex AI API to generate a reply
    runIf: |
      {% if slack_should_reply %}1{% endif %}
    output: vertex_response
    config:
      apiVersion: "v1beta"
      location: "${vertex_region}"
      modelId: "${vertex_model}"
      method: "streamGenerateContent"
      returnErrors: true
%{ if api_enabled ~}
      callFunctions:
        search_vertex:
          url: "${vertex_search_function}"
          method: "POST"
          headers:
            - name: Content-type
              value: application/json
          body:
            query: "{{ query }}"
          idToken: true
%{ endif ~}
      request:
        contentsExpr: slack_messages
%{ if api_enabled ~}
        tools:
          functionDeclarations:
            - name: search_vertex
              description: |
                This function is only for getting current information on Alphabet
                financials, do not use it for anything else. 
              parameters:
                type: object
                properties:
                  query:
                    type: string
                    description: Search query
                required:
                  - query
%{ endif ~}
        safetySettings:
          - category: HARM_CATEGORY_SEXUALLY_EXPLICIT
            threshold: BLOCK_ONLY_HIGH
          - category: HARM_CATEGORY_HATE_SPEECH
            threshold: BLOCK_ONLY_HIGH
          - category: HARM_CATEGORY_HARASSMENT
            threshold: BLOCK_ONLY_HIGH
          - category: HARM_CATEGORY_DANGEROUS_CONTENT
            threshold: BLOCK_ONLY_HIGH
        generationConfig:
          temperature: %{ if api_enabled }0.0%{ else }0.9%{ endif }
          topP: 1.0
          topK: 32
          candidateCount: 1
          maxOutputTokens: 2048
          # stopSequences: []
  # Log the response
  - type: output.logger
    runIf: |
      {% if slack_should_reply %}1{% endif %}
    config:
      message: "Vertex GenAI response: {{ vertex_response|json_encode }}"

  # Post Vertex AI reply to the correct thread
  - type: output.slack
    description: Reply back in Slack to the correct thread
    runIf: "{% if slack_should_reply and vertex_response|length > 0 %}1{% endif %}"
    config:
      token: "{{ slackToken }}"
      api: chat.postMessage
      request:
        channel: "{{ data.event.channel }}"
        thread_ts: "{% if data.event.thread_ts %}{{ data.event.thread_ts }}{% else %}{{ data.event.ts }}{% endif %}"
        text: |
          {% if 'error' in vertex_response %}{{ vertex_response.error }}{% endif %}{% for resp in vertex_response %}{% for candidate in resp.candidates %}{% for part in candidate.content.parts %}{{ part.text }}{% endfor %}{% endfor %}{% endfor %}
