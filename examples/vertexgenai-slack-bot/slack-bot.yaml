#   Copyright 2023 Google LLC
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# This example requires the following Slack permission scopes:
# - channels:history,
# - groups:history
# - mpim:history
# - im:history
# - chat:write
globals:
  slackToken: "${slack_token}"
  slackAppId: "${slack_app_id}"

pipeline:
  - type: processor.genericjson

  # Parse the incoming Slack message by removing the IRC-like nick from the message
  - type: processor.setvariable
    runIf: |
      {% if 'api_app_id' in data and data.event.type == 'app_mention' %}1{% endif %}
    output: slack_message_text
    config:
      value: |
        {{ data.event.text|regex_replace('^<[^>]+> ', '') }}

  # Parse the incoming Slack message by removing the IRC-like nick from the message
  - type: processor.setvariable
    # Check if this is our bot message from events API
    stopIf: |
      {% if 'type' in data and data.event.type == 'message' and data.event.app_id %}1{% endif %}
    runIf: |
      {% if 'type' in data and data.event.type == 'message' %}1{% endif %}
    output: slack_message_text
    config:
      value: |
        {{ data.event.text|regex_replace('^<[^>]+> ', '') }}

  # Fetch existing conversation history from Slack to pass back to Vertex PaLM for context
  - type: processor.slack
    runIf: "{% if slack_message_text %}1{% endif %}"
    output: slack_thread
    config:
      api: conversations.replies
      token: "{{ slackToken }}"
      request:
        channel: "{{ data.event.channel }}"
        ts: "{% if data.event.thread_ts %}{{ data.event.thread_ts }}{% else %}{{ data.event.ts }}{% endif %}"

  # See if this conservation thread has any our app ID mentioned, if so, assume it's a follow up thread
  - type: processor.setvariable
    runIf: |
      {% if slack_message_text %}1{% endif %}
    output: slack_should_reply
    config:
      fromJson: true
      value: |
        {% set app_thread = [(data.event.type == 'app_mention')] %}{% for message in slack_thread.messages %}{% if message.app_id == slackAppId %}{% set _ = app_thread.append(true) %}{% endif %}{% endfor %}{{ app_thread|last|json_encode }}
  
  # Process the returned conversation history messages into suitable format for Vertex
  - type: processor.setvariable
    runIf: |
      {% if slack_message_text and slack_should_reply %}1{% endif %}
    output: slack_messages
    config:
      fromJson: true
      value: |
        {%- set messages = [] -%}{%- for message in slack_thread.messages -%}{%- set _ = messages.append({"author":"AI" if data.event.user != message.user else "USER","content":message.text|regex_replace('^<[^>]+> ', '')}) -%}{%- endfor -%}{% set _ = messages.append({"author":"USER","content":slack_message_text}) %}{{ messages|json_encode }}

  # Call Vertex AI Generative AI with the thread messages to make a chat reply
  - type: processor.vertexgenai
    runIf: |
      {% if slack_message_text and slack_should_reply %}1{% endif %}
    output: vertex_response
    config:
      location: "${vertex_region}"
      modelId: "${vertex_model}"
      request:
        instances:
          - messagesExpr: slack_messages
            context: |
              I am a Slack bot designed to be helpful.
        parameters:
          temperature: 0.3
          topP: 0.8
          topK: 40 
          maxOutputTokens: 200 # in some documentation, this appears as maxDecodeSteps, which has been renamed to maxOutputTokens
  
  # Log the response
  - type: output.logger
    runIf: |
      {% if slack_message_text and slack_should_reply %}1{% endif %}
    config:
      message: "Vertex GenAI response: {{ vertex_response|json_encode }}"

  # Post Vertex AI reply to the correct thread
  - type: output.slack
    runIf: "{% if slack_message_text and slack_should_reply and vertex_response.predictions|length > 0 %}1{% endif %}"
    config:
      token: "{{ slackToken }}"
      api: chat.postMessage
      request:
        channel: "{{ data.event.channel }}"
        thread_ts: "{% if data.event.thread_ts %}{{ data.event.thread_ts }}{% else %}{{ data.event.ts }}{% endif %}"
        text: |
          {{ ((vertex_response.predictions|first).candidates|first).content }}
          

